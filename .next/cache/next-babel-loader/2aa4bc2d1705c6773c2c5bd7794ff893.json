{"ast":null,"code":"var _jsxFileName = \"W:\\\\1FrontEnd\\\\react stuff\\\\courtSide\\\\pages\\\\roster.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getSingleRoaster, getAllPlayerId } from '../redux/actions/counterActions';\nimport { useImmer } from \"use-immer\"; //--//\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nconst Roster = props => {\n  const dispatch = useDispatch();\n  const {\n    teamRoaster,\n    personIds\n  } = useSelector(state => state.counter);\n  const [state, setState] = useImmer({\n    isLoading: true,\n    players: []\n  });\n  useEffect(() => {\n    dispatch(getSingleRoaster(props.teamID));\n  }, []);\n  useEffect(() => {\n    if (!teamRoaster) {\n      console.log('run something here');\n    } else {\n      dispatch(getAllPlayerId('1610612750'));\n    }\n  }, [teamRoaster]);\n  useEffect(() => {\n    if (personIds) {\n      console.log(personIds.league.standard.players);\n      setState(draft => {\n        draft.players = personIds.league.standard.players;\n      });\n    }\n  }, [personIds]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, state.players.length > 0 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"list-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, state.players.map(post => {\n    __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }\n    }, \"post\");\n  }))));\n};\n\nRoster.getInitialProps = async function ({\n  store,\n  req,\n  res,\n  query\n}) {\n  const teamName = query.team;\n  return {\n    teamID: teamName\n  };\n};\n\nexport default Roster;","map":{"version":3,"sources":["W:/1FrontEnd/react stuff/courtSide/pages/roster.js"],"names":["React","useEffect","useState","fetch","connect","useDispatch","useSelector","getSingleRoaster","getAllPlayerId","useImmer","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useStyles","table","minWidth","Roster","props","dispatch","teamRoaster","personIds","state","counter","setState","isLoading","players","teamID","console","log","league","standard","draft","length","map","post","getInitialProps","store","req","res","query","teamName","team"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAAQC,OAAR,EAAgBC,WAAhB,EAA4BC,WAA5B,QAA8C,aAA9C;AACA,SAAQC,gBAAR,EAAyBC,cAAzB,QAA8C,iCAA9C;AACA,SAASC,QAAT,QAAyB,WAAzB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAGA,MAAMC,SAAS,GAAGR,UAAU,CAAC;AACzBS,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP;AADkB,CAAD,CAA5B;;AAMA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAM;AAACmB,IAAAA,WAAD;AAAaC,IAAAA;AAAb,MAA0BnB,WAAW,CAAEoB,KAAD,IAASA,KAAK,CAACC,OAAhB,CAA3C;AACA,QAAM,CAACD,KAAD,EAAQE,QAAR,IAAoBnB,QAAQ,CAAC;AAC/BoB,IAAAA,SAAS,EAAE,IADoB;AAE/BC,IAAAA,OAAO,EAAE;AAFsB,GAAD,CAAlC;AAKA7B,EAAAA,SAAS,CAAC,MAAI;AACVsB,IAAAA,QAAQ,CAAChB,gBAAgB,CAACe,KAAK,CAACS,MAAP,CAAjB,CAAR;AACH,GAFQ,EAEP,EAFO,CAAT;AAIA9B,EAAAA,SAAS,CAAC,MAAI;AACT,QAAG,CAACuB,WAAJ,EAAgB;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAFD,MAEO;AACHV,MAAAA,QAAQ,CAACf,cAAc,CAAC,YAAD,CAAf,CAAR;AACH;AACL,GANQ,EAMP,CAACgB,WAAD,CANO,CAAT;AAQAvB,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGwB,SAAH,EAAa;AACTO,MAAAA,OAAO,CAACC,GAAR,CAAYR,SAAS,CAACS,MAAV,CAAiBC,QAAjB,CAA0BL,OAAtC;AACAF,MAAAA,QAAQ,CAACQ,KAAK,IAAI;AACdA,QAAAA,KAAK,CAACN,OAAN,GAAgBL,SAAS,CAACS,MAAV,CAAiBC,QAAjB,CAA0BL,OAA1C;AACH,OAFO,CAAR;AAGH;AACJ,GAPQ,EAOP,CAACL,SAAD,CAPO,CAAT;AAUA,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,KAAK,CAACI,OAAN,CAAcO,MAAd,GAAuB,CAAvB,IACG,4BACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAACI,OAAN,CAAcQ,GAAd,CAAkBC,IAAI,IAAI;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,GAFA,CADL,CADJ,CAFR,CAFJ;AAcH,CA5CD;;AA8CAlB,MAAM,CAACmB,eAAP,GAAyB,gBAAe;AAACC,EAAAA,KAAD;AAAOC,EAAAA,GAAP;AAAWC,EAAAA,GAAX;AAAeC,EAAAA;AAAf,CAAf,EAAsC;AAC3D,QAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAvB;AAEA,SAAO;AACHf,IAAAA,MAAM,EAAEc;AADL,GAAP;AAGH,CAND;;AAOA,eAAexB,MAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {connect,useDispatch,useSelector} from 'react-redux';\r\nimport {getSingleRoaster,getAllPlayerId} from '../redux/actions/counterActions';\r\nimport { useImmer } from \"use-immer\"\r\n\r\n//--//\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nconst Roster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const {teamRoaster,personIds} = useSelector((state)=>state.counter);\r\n    const [state, setState] = useImmer({\r\n        isLoading: true,\r\n        players: []\r\n    })\r\n\r\n    useEffect(()=>{\r\n        dispatch(getSingleRoaster(props.teamID))\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n         if(!teamRoaster){\r\n             console.log('run something here');\r\n         } else {\r\n             dispatch(getAllPlayerId('1610612750'));\r\n         }\r\n    },[teamRoaster])\r\n\r\n    useEffect(()=>{\r\n        if(personIds){\r\n            console.log(personIds.league.standard.players)\r\n            setState(draft => {\r\n                draft.players = personIds.league.standard.players\r\n            })\r\n        }\r\n    },[personIds])\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {state.players.length > 0 && (\r\n                <>\r\n                    <div className=\"list-group\">\r\n                        {state.players.map(post => {\r\n                            <h1>post</h1>\r\n                        })}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nRoster.getInitialProps = async function({store,req,res,query}) {\r\n    const teamName = query.team;\r\n\r\n    return {\r\n        teamID: teamName\r\n    };\r\n}\r\nexport default Roster;\r\n\r\n"]},"metadata":{},"sourceType":"module"}