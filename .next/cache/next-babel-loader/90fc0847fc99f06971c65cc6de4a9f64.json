{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getSingleRoaster, getAllPlayerId } from '../redux/actions/counterActions';\nimport { useImmer } from \"use-immer\";\nimport Cards from '../components/Cards'; //--//\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nvar useStyles = makeStyles({\n  root: {\n    backgroundImage: \"url(\".concat(\"./floor.png\", \")\"),\n    backgroundAttachment: 'fixed',\n    height: '100vh'\n  },\n  table: {\n    minWidth: 650\n  },\n  tableStyle: {\n    width: '50%',\n    margin: 'auto'\n  }\n});\n\nvar Roster = function Roster(props) {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.counter;\n  }),\n      teamRoaster = _useSelector.teamRoaster,\n      personIds = _useSelector.personIds;\n\n  var _useImmer = useImmer({\n    isLoading: true,\n    players: []\n  }),\n      _useImmer2 = _slicedToArray(_useImmer, 2),\n      state = _useImmer2[0],\n      setState = _useImmer2[1];\n\n  useEffect(function () {\n    dispatch(getSingleRoaster(props.teamName));\n  }, []);\n  /*get all playerid for a given roster by team name*/\n\n  useEffect(function () {\n    if (!teamRoaster) {\n      console.log('run something here');\n    } else {\n      console.log(teamRoaster[0].teamId);\n      dispatch(getAllPlayerId(teamRoaster[0].teamId));\n    }\n  }, [teamRoaster]);\n  /*array of player ids*/\n\n  useEffect(function () {\n    if (!personIds) {\n      console.log('xxxxxxxxx');\n    } else {\n      console.log(personIds.league.standard.players);\n      setState(function (draft) {\n        draft.players = personIds.league.standard.players;\n      });\n    }\n  }, [personIds]);\n  return __jsx(\"div\", null, state.players.length > 0 && __jsx(TableContainer, {\n    component: Paper,\n    className: classes.tableStyle\n  }, __jsx(Table, {\n    className: classes.table,\n    size: \"small\",\n    \"aria-label\": \"a dense table\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Name\"), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Calories\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"Fat\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"Carbs\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"Protein\\xA0(g)\"))), __jsx(TableBody, null, state.players.map(function (post) {\n    return __jsx(Cards, {\n      key: post.personId,\n      apost: post.personId\n    });\n  })))));\n};\n\nRoster.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var store, req, res, query, team;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            store = _ref.store, req = _ref.req, res = _ref.res, query = _ref.query;\n            team = query.team;\n            return _context.abrupt(\"return\", {\n              teamName: team\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Roster;","map":null,"metadata":{},"sourceType":"module"}