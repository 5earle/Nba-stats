{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"W:\\\\1FrontEnd\\\\react stuff\\\\courtSide\\\\pages\\\\roster.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getSingleRoaster, getAllPlayerId } from '../redux/actions/counterActions';\nimport { useImmer } from \"use-immer\";\nimport Cards from '../components/Cards'; //--//\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nvar useStyles = makeStyles({\n  root: {\n    backgroundImage: \"url(\".concat(\"./floor.png\", \")\"),\n    backgroundAttachment: 'fixed',\n    height: '100vh'\n  },\n  table: {\n    minWidth: 650\n  },\n  tableStyle: {\n    width: '50%',\n    margin: 'auto'\n  }\n});\n\nvar Roster = function Roster(props) {\n  _s();\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.counter;\n  }),\n      teamRoaster = _useSelector.teamRoaster,\n      personIds = _useSelector.personIds;\n\n  var _useImmer = useImmer({\n    isLoading: true,\n    players: [],\n    playerBio: []\n  }),\n      _useImmer2 = _slicedToArray(_useImmer, 2),\n      state = _useImmer2[0],\n      setState = _useImmer2[1];\n\n  useEffect(function () {\n    dispatch(getSingleRoaster(props.teamName));\n    getAllPlayers();\n  }, []);\n  /*get all playerid for a given roster by team name*/\n\n  useEffect(function () {\n    if (!teamRoaster) {\n      console.log('run something here');\n    } else {\n      console.log(teamRoaster[0].teamId);\n      dispatch(getAllPlayerId(teamRoaster[0].teamId));\n    }\n  }, [teamRoaster]);\n  /*array of player ids*/\n\n  useEffect(function () {\n    if (!personIds) {} else {\n      setState(function (draft) {\n        draft.players = personIds.league.standard.players;\n      });\n    }\n  }, [personIds]);\n\n  function getAllPlayers() {\n    return _getAllPlayers.apply(this, arguments);\n  }\n\n  function _getAllPlayers() {\n    _getAllPlayers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, data, filteredTeams;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"http://data.nba.net/10s/prod/v1/2019/players.json\");\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n              console.log(data.league.standard);\n              filteredTeams = data.league.standard.filter(function (team) {\n                return team.includes(teamRoaster[0].teamId);\n              });\n              console.log(filteredTeams);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 12]]);\n    }));\n    return _getAllPlayers.apply(this, arguments);\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, state.players.length > 0 && __jsx(TableContainer, {\n    component: Paper,\n    className: classes.tableStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    size: \"small\",\n    \"aria-label\": \"a dense table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, __jsx(TableHead, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, __jsx(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }, __jsx(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 33\n    }\n  }, \"NAME\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  }, \"POINTS\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 33\n    }\n  }, \"BLOCKS\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, \"ASSISTS\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }, \"STEALS\"))), __jsx(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, state.players.map(function (post, index) {\n    if (index <= state.players.length) {\n      return __jsx(Cards, {\n        key: index,\n        apost: post.personId,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 43\n        }\n      });\n    }\n  })))));\n};\n\n_s(Roster, \"lj/mPlrtQyw1K/Lp0uWOi2Qf5Ws=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useImmer];\n});\n\n_c = Roster;\n\nRoster.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {\n    var store, req, res, query, team;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            store = _ref.store, req = _ref.req, res = _ref.res, query = _ref.query;\n            team = query.team;\n            return _context2.abrupt(\"return\", {\n              teamName: team\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Roster;\n\nvar _c;\n\n$RefreshReg$(_c, \"Roster\");","map":{"version":3,"sources":["W:/1FrontEnd/react stuff/courtSide/pages/roster.js"],"names":["React","useEffect","useState","fetch","connect","useDispatch","useSelector","getSingleRoaster","getAllPlayerId","useImmer","Cards","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useStyles","root","backgroundImage","backgroundAttachment","height","table","minWidth","tableStyle","width","margin","Roster","props","classes","dispatch","state","counter","teamRoaster","personIds","isLoading","players","playerBio","setState","teamName","getAllPlayers","console","log","teamId","draft","league","standard","response","json","data","filteredTeams","filter","team","includes","length","map","post","index","personId","getInitialProps","store","req","res","query"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAAQC,OAAR,EAAgBC,WAAhB,EAA4BC,WAA5B,QAA8C,aAA9C;AACA,SAAQC,gBAAR,EAAyBC,cAAzB,QAA8C,iCAA9C;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAGA,IAAMC,SAAS,GAAGR,UAAU,CAAC;AACzBS,EAAAA,IAAI,EAAE;AACFC,IAAAA,eAAe,gBAAS,aAAT,MADb;AAEFC,IAAAA,oBAAoB,EAAE,OAFpB;AAGFC,IAAAA,MAAM,EAAE;AAHN,GADmB;AAMzBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP,GANkB;AASzBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,KAAK,EAAE,KADC;AAERC,IAAAA,MAAM,EAAE;AAFA;AATa,CAAD,CAA5B;;AAeA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AAAA;;AACtB,MAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,MAAMa,QAAQ,GAAG3B,WAAW,EAA5B;;AAFsB,qBAGUC,WAAW,CAAC,UAAC2B,KAAD;AAAA,WAASA,KAAK,CAACC,OAAf;AAAA,GAAD,CAHrB;AAAA,MAGfC,WAHe,gBAGfA,WAHe;AAAA,MAGHC,SAHG,gBAGHA,SAHG;;AAAA,kBAKI3B,QAAQ,CAAC;AAC/B4B,IAAAA,SAAS,EAAE,IADoB;AAE/BC,IAAAA,OAAO,EAAE,EAFsB;AAG/BC,IAAAA,SAAS,EAAE;AAHoB,GAAD,CALZ;AAAA;AAAA,MAKfN,KALe;AAAA,MAKRO,QALQ;;AAWtBvC,EAAAA,SAAS,CAAC,YAAI;AACV+B,IAAAA,QAAQ,CAACzB,gBAAgB,CAACuB,KAAK,CAACW,QAAP,CAAjB,CAAR;AACAC,IAAAA,aAAa;AAChB,GAHQ,EAGP,EAHO,CAAT;AAKA;;AACAzC,EAAAA,SAAS,CAAC,YAAI;AACT,QAAG,CAACkC,WAAJ,EAAgB;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAYT,WAAW,CAAC,CAAD,CAAX,CAAeU,MAA3B;AACAb,MAAAA,QAAQ,CAACxB,cAAc,CAAC2B,WAAW,CAAC,CAAD,CAAX,CAAeU,MAAhB,CAAf,CAAR;AACH;AACL,GAPQ,EAOP,CAACV,WAAD,CAPO,CAAT;AASD;;AACClC,EAAAA,SAAS,CAAC,YAAI;AACV,QAAG,CAACmC,SAAJ,EAAc,CACb,CADD,MACM;AACFI,MAAAA,QAAQ,CAAC,UAAAM,KAAK,EAAI;AACdA,QAAAA,KAAK,CAACR,OAAN,GAAgBF,SAAS,CAACW,MAAV,CAAiBC,QAAjB,CAA0BV,OAA1C;AACH,OAFO,CAAR;AAGH;AACJ,GAPQ,EAOP,CAACF,SAAD,CAPO,CAAT;;AA3BsB,WAqCPM,aArCO;AAAA;AAAA;;AAAA;AAAA,8EAqCtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE+BvC,KAAK,qDAFpC;;AAAA;AAEc8C,cAAAA,QAFd;AAAA;AAAA,qBAG2BA,QAAQ,CAACC,IAAT,EAH3B;;AAAA;AAGcC,cAAAA,IAHd;AAKQR,cAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAACJ,MAAL,CAAYC,QAAxB;AACII,cAAAA,aANZ,GAM4BD,IAAI,CAACJ,MAAL,CAAYC,QAAZ,CAAqBK,MAArB,CAA4B,UAACC,IAAD,EAAQ;AACpD,uBAAOA,IAAI,CAACC,QAAL,CAAcpB,WAAW,CAAC,CAAD,CAAX,CAAeU,MAA7B,CAAP;AACH,eAFmB,CAN5B;AASQF,cAAAA,OAAO,CAACC,GAAR,CAAYQ,aAAZ;AATR;AAAA;;AAAA;AAAA;AAAA;AAYQT,cAAAA,OAAO,CAACC,GAAR;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArCsB;AAAA;AAAA;;AAuDtB,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAACK,OAAN,CAAckB,MAAd,GAAuB,CAAvB,IAEG,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEtC,KAA3B;AAAkC,IAAA,SAAS,EAAEa,OAAO,CAACL,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEK,OAAO,CAACP,KAA1B;AAAiC,IAAA,IAAI,EAAC,OAAtC;AAA8C,kBAAW,eAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAII,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,EAKI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADJ,CADJ,EAUI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,KAAK,CAACK,OAAN,CAAcmB,GAAd,CAAkB,UAACC,IAAD,EAAMC,KAAN,EAAgB;AAChC,QAAGA,KAAK,IAAI1B,KAAK,CAACK,OAAN,CAAckB,MAA1B,EAAiC;AAC7B,aAAO,MAAC,KAAD;AAAO,QAAA,GAAG,EAAEG,KAAZ;AAAmB,QAAA,KAAK,EAAED,IAAI,CAACE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACH,GAJA,CADL,CAVJ,CADJ,CAHR,CAFJ;AA6BH,CApFD;;GAAM/B,M;UACcV,S,EACCd,W,EACeC,W,EAENG,Q;;;KALxBoB,M;;AAsFNA,MAAM,CAACgC,eAAP;AAAA,uEAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBC,YAAAA,KAAhB,QAAgBA,KAAhB,EAAsBC,GAAtB,QAAsBA,GAAtB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA8BC,KAA9B,QAA8BA,KAA9B;AACfX,YAAAA,IADe,GACRW,KAAK,CAACX,IADE;AAAA,8CAGd;AACHb,cAAAA,QAAQ,EAAEa;AADP,aAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAezB,MAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {connect,useDispatch,useSelector} from 'react-redux';\r\nimport {getSingleRoaster,getAllPlayerId} from '../redux/actions/counterActions';\r\nimport { useImmer } from \"use-immer\"\r\nimport Cards from '../components/Cards';\r\n\r\n//--//\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundImage: `url(${\"./floor.png\"})`,\r\n        backgroundAttachment: 'fixed',\r\n        height: '100vh'\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    tableStyle: {\r\n        width: '50%',\r\n        margin: 'auto',\r\n    }\r\n});\r\n\r\nconst Roster = (props) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {teamRoaster,personIds} = useSelector((state)=>state.counter);\r\n\r\n    const [state, setState] = useImmer({\r\n        isLoading: true,\r\n        players: [],\r\n        playerBio: []\r\n    })\r\n\r\n    useEffect(()=>{\r\n        dispatch(getSingleRoaster(props.teamName));\r\n        getAllPlayers();\r\n    },[])\r\n\r\n    /*get all playerid for a given roster by team name*/\r\n    useEffect(()=>{\r\n         if(!teamRoaster){\r\n             console.log('run something here');\r\n         } else {\r\n             console.log(teamRoaster[0].teamId);\r\n             dispatch(getAllPlayerId(teamRoaster[0].teamId));\r\n         }\r\n    },[teamRoaster])\r\n\r\n   /*array of player ids*/\r\n    useEffect(()=>{\r\n        if(!personIds){\r\n        } else{\r\n            setState(draft => {\r\n                draft.players = personIds.league.standard.players\r\n            })\r\n        }\r\n    },[personIds])\r\n\r\n\r\n    async function getAllPlayers() {\r\n        try{\r\n            const response = await fetch(`http://data.nba.net/10s/prod/v1/2019/players.json`);\r\n            const data = await response.json();\r\n\r\n            console.log(data.league.standard);\r\n            let filteredTeams = data.league.standard.filter((team)=>{\r\n                return team.includes(teamRoaster[0].teamId);\r\n            })\r\n            console.log(filteredTeams);\r\n\r\n        }catch (e) {\r\n            console.log(e)\r\n        }\r\n        /*setPlayer(data.league.standard.stats.careerSummary);*/\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {state.players.length > 0 && (\r\n\r\n                <TableContainer component={Paper} className={classes.tableStyle}>\r\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>NAME</TableCell>\r\n                                <TableCell align=\"left\">POINTS</TableCell>\r\n                                <TableCell align=\"right\">BLOCKS</TableCell>\r\n                                <TableCell align=\"right\">ASSISTS</TableCell>\r\n                                <TableCell align=\"right\">STEALS</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {state.players.map((post,index) => {\r\n                               if(index <= state.players.length){\r\n                                   return <Cards key={index} apost={post.personId}/>\r\n                               }\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nRoster.getInitialProps = async function({store,req,res,query}) {\r\n    const team = query.team;\r\n\r\n    return {\r\n        teamName: team\r\n    };\r\n}\r\nexport default Roster;\r\n\r\n"]},"metadata":{},"sourceType":"module"}