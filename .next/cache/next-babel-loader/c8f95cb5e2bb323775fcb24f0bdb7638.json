{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { INCREMENT_COUNTER, DECREMENT_COUNTER, SAVE_PLAYERS, GET_PLAYERS } from '../actions/types';\nconst initialState = {\n  basketBallPlayers: null,\n  loading: false,\n  error: null,\n  counter: 0\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SAVE_PLAYERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basketBallPlayers: action.payload\n      });\n\n    case GET_PLAYERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basketBallPlayers: action.payload\n      });\n\n    case INCREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        counter: state.counter + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        counter: state.counter - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["W:/1FrontEnd/react stuff/basketballApi/redux/reducers/counterReducer.js"],"names":["INCREMENT_COUNTER","DECREMENT_COUNTER","SAVE_PLAYERS","GET_PLAYERS","initialState","basketBallPlayers","loading","error","counter","counterReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,EAA0BC,iBAA1B,EAA4CC,YAA5C,EAAyDC,WAAzD,QAA2E,kBAA3E;AAIA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,iBAAiB,EAAE,IADF;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,OAAO,EAAE;AAJQ,CAArB;;AAOA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAEN,YAAR,EAAsBO,MAAtB,KAAiC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,YAAL;AACI,6CACOQ,KADP;AAEIL,QAAAA,iBAAiB,EAAEM,MAAM,CAACE;AAF9B;;AAIJ,SAAKV,WAAL;AACI,6CACOO,KADP;AAEIL,QAAAA,iBAAiB,EAAEM,MAAM,CAACE;AAF9B;;AAIJ,SAAKb,iBAAL;AACI,6CAAWU,KAAX;AAAkBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgB;AAA3C;;AACJ,SAAKP,iBAAL;AACI,6CAAWS,KAAX;AAAkBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgB;AAA3C;;AACJ;AACI,+BAAWE,KAAX;AAhBR;AAkBH,CAnBD;;AAqBA,eAAeD,cAAf","sourcesContent":["import {INCREMENT_COUNTER,DECREMENT_COUNTER,SAVE_PLAYERS,GET_PLAYERS} from '../actions/types'\r\n\r\n\r\n\r\nconst initialState = {\r\n    basketBallPlayers: null,\r\n    loading: false,\r\n    error: null,\r\n    counter: 0\r\n};\r\n\r\nconst counterReducer = (state= initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_PLAYERS:\r\n            return {\r\n                ...state,\r\n                basketBallPlayers: action.payload\r\n            };\r\n        case GET_PLAYERS:\r\n            return {\r\n                ...state,\r\n                basketBallPlayers: action.payload\r\n            };\r\n        case INCREMENT_COUNTER:\r\n            return {...state, counter: state.counter + 1};\r\n        case DECREMENT_COUNTER:\r\n            return {...state, counter: state.counter - 1};\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\nexport default counterReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}