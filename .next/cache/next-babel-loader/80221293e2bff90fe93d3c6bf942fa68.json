{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { INCREMENT_COUNTER, DECREMENT_COUNTER } from '../actions/types';\nconst initialState = {\n  counter: 0,\n  players: null\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        counter: state.counter + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        counter: state.counter - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["W:/1FrontEnd/react stuff/basketballApi/redux/reducers/counterReducer.js"],"names":["INCREMENT_COUNTER","DECREMENT_COUNTER","initialState","counter","players","counterReducer","state","action","type"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,EAA0BC,iBAA1B,QAAmD,kBAAnD;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAEJ,YAAR,EAAsBK,MAAtB,KAAiC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,iBAAL;AACI,6CAAWM,KAAX;AAAkBH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAA3C;;AACJ,SAAKF,iBAAL;AACI,6CAAWK,KAAX;AAAkBH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAA3C;;AACJ;AACI,+BAAWG,KAAX;AANR;AAQH,CATD;;AAWA,eAAeD,cAAf","sourcesContent":["import {INCREMENT_COUNTER,DECREMENT_COUNTER } from '../actions/types'\r\n\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    players: null\r\n};\r\n\r\nconst counterReducer = (state= initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT_COUNTER:\r\n            return {...state, counter: state.counter + 1};\r\n        case DECREMENT_COUNTER:\r\n            return {...state, counter: state.counter - 1};\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\nexport default counterReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}