{"ast":null,"code":"var _jsxFileName = \"W:\\\\1FrontEnd\\\\react stuff\\\\courtSide\\\\pages\\\\roster.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getSingleRoaster, getAllPlayerId } from '../redux/actions/counterActions';\nimport { useImmer } from \"use-immer\";\nimport Cards from '../components/Cards'; //--//\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nconst useStyles = makeStyles({\n  root: {\n    backgroundImage: `url(${\"./floor.png\"})`,\n    backgroundAttachment: 'fixed',\n    height: '100vh'\n  },\n  table: {\n    minWidth: 650\n  },\n  tableStyle: {\n    width: '50%',\n    margin: 'auto'\n  }\n});\n\nconst Roster = props => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    teamRoaster,\n    personIds\n  } = useSelector(state => state.counter);\n  const [state, setState] = useImmer({\n    isLoading: true,\n    players: [],\n    playerBio: []\n  });\n  useEffect(() => {\n    dispatch(getSingleRoaster(props.teamName));\n    getAllPlayers();\n  }, []);\n  /*get all playerid for a given roster by team name*/\n\n  useEffect(() => {\n    if (!teamRoaster) {\n      console.log('run something here');\n    } else {\n      console.log(teamRoaster[0].teamId);\n      dispatch(getAllPlayerId(teamRoaster[0].teamId));\n    }\n  }, [teamRoaster]);\n  /*array of player ids*/\n\n  useEffect(() => {\n    if (!personIds) {} else {\n      setState(draft => {\n        draft.players = personIds.league.standard.players;\n      });\n    }\n  }, [personIds]);\n\n  async function getAllPlayers() {\n    try {\n      const response = await fetch(`http://data.nba.net/10s/prod/v1/2019/players.json`);\n      const data = await response.json();\n      let filteredTeams = data.league.standard.filter(team => {\n        console.log(team.personId);\n      });\n    } catch (e) {\n      console.log(e);\n    }\n    /*setPlayer(data.league.standard.stats.careerSummary);*/\n\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, state.players.length > 0 && __jsx(TableContainer, {\n    component: Paper,\n    className: classes.tableStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    size: \"small\",\n    \"aria-label\": \"a dense table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 33\n    }\n  }, \"NAME\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  }, \"POINTS\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 33\n    }\n  }, \"BLOCKS\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, \"ASSISTS\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }, \"STEALS\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, state.players.map((post, index) => {\n    if (index <= state.players.length) {\n      return __jsx(Cards, {\n        key: index,\n        apost: post.personId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 43\n        }\n      });\n    }\n  })))));\n};\n\nRoster.getInitialProps = async function ({\n  store,\n  req,\n  res,\n  query\n}) {\n  const team = query.team;\n  return {\n    teamName: team\n  };\n};\n\nexport default Roster;","map":{"version":3,"sources":["W:/1FrontEnd/react stuff/courtSide/pages/roster.js"],"names":["React","useEffect","useState","fetch","connect","useDispatch","useSelector","getSingleRoaster","getAllPlayerId","useImmer","Cards","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useStyles","root","backgroundImage","backgroundAttachment","height","table","minWidth","tableStyle","width","margin","Roster","props","classes","dispatch","teamRoaster","personIds","state","counter","setState","isLoading","players","playerBio","teamName","getAllPlayers","console","log","teamId","draft","league","standard","response","data","json","filteredTeams","filter","team","personId","e","length","map","post","index","getInitialProps","store","req","res","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAAQC,OAAR,EAAgBC,WAAhB,EAA4BC,WAA5B,QAA8C,aAA9C;AACA,SAAQC,gBAAR,EAAyBC,cAAzB,QAA8C,iCAA9C;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAGA,MAAMC,SAAS,GAAGR,UAAU,CAAC;AACzBS,EAAAA,IAAI,EAAE;AACFC,IAAAA,eAAe,EAAG,OAAM,aAAc,GADpC;AAEFC,IAAAA,oBAAoB,EAAE,OAFpB;AAGFC,IAAAA,MAAM,EAAE;AAHN,GADmB;AAMzBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP,GANkB;AASzBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,KAAK,EAAE,KADC;AAERC,IAAAA,MAAM,EAAE;AAFA;AATa,CAAD,CAA5B;;AAeA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAMa,QAAQ,GAAG3B,WAAW,EAA5B;AACA,QAAM;AAAC4B,IAAAA,WAAD;AAAaC,IAAAA;AAAb,MAA0B5B,WAAW,CAAE6B,KAAD,IAASA,KAAK,CAACC,OAAhB,CAA3C;AAEA,QAAM,CAACD,KAAD,EAAQE,QAAR,IAAoB5B,QAAQ,CAAC;AAC/B6B,IAAAA,SAAS,EAAE,IADoB;AAE/BC,IAAAA,OAAO,EAAE,EAFsB;AAG/BC,IAAAA,SAAS,EAAE;AAHoB,GAAD,CAAlC;AAMAvC,EAAAA,SAAS,CAAC,MAAI;AACV+B,IAAAA,QAAQ,CAACzB,gBAAgB,CAACuB,KAAK,CAACW,QAAP,CAAjB,CAAR;AACAC,IAAAA,aAAa;AAChB,GAHQ,EAGP,EAHO,CAAT;AAKA;;AACAzC,EAAAA,SAAS,CAAC,MAAI;AACT,QAAG,CAACgC,WAAJ,EAAgB;AACZU,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAYX,WAAW,CAAC,CAAD,CAAX,CAAeY,MAA3B;AACAb,MAAAA,QAAQ,CAACxB,cAAc,CAACyB,WAAW,CAAC,CAAD,CAAX,CAAeY,MAAhB,CAAf,CAAR;AACH;AACL,GAPQ,EAOP,CAACZ,WAAD,CAPO,CAAT;AASD;;AACChC,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACiC,SAAJ,EAAc,CACb,CADD,MACM;AACFG,MAAAA,QAAQ,CAACS,KAAK,IAAI;AACdA,QAAAA,KAAK,CAACP,OAAN,GAAgBL,SAAS,CAACa,MAAV,CAAiBC,QAAjB,CAA0BT,OAA1C;AACH,OAFO,CAAR;AAGH;AACJ,GAPQ,EAOP,CAACL,SAAD,CAPO,CAAT;;AAUA,iBAAeQ,aAAf,GAA+B;AAC3B,QAAG;AACC,YAAMO,QAAQ,GAAG,MAAM9C,KAAK,CAAE,mDAAF,CAA5B;AACA,YAAM+C,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AAGA,UAAIC,aAAa,GAAGF,IAAI,CAACH,MAAL,CAAYC,QAAZ,CAAqBK,MAArB,CAA6BC,IAAD,IAAQ;AACpDX,QAAAA,OAAO,CAACC,GAAR,CAAYU,IAAI,CAACC,QAAjB;AACH,OAFmB,CAApB;AAKH,KAVD,CAUC,OAAOC,CAAP,EAAU;AACPb,MAAAA,OAAO,CAACC,GAAR,CAAYY,CAAZ;AACH;AACD;;AACH;;AAGD,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,KAAK,CAACI,OAAN,CAAckB,MAAd,GAAuB,CAAvB,IAEG,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEvC,KAA3B;AAAkC,IAAA,SAAS,EAAEa,OAAO,CAACL,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEK,OAAO,CAACP,KAA1B;AAAiC,IAAA,IAAI,EAAC,OAAtC;AAA8C,kBAAW,eAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAII,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,EAKI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADJ,CADJ,EAUI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKW,KAAK,CAACI,OAAN,CAAcmB,GAAd,CAAkB,CAACC,IAAD,EAAMC,KAAN,KAAgB;AAChC,QAAGA,KAAK,IAAIzB,KAAK,CAACI,OAAN,CAAckB,MAA1B,EAAiC;AAC7B,aAAO,MAAC,KAAD;AAAO,QAAA,GAAG,EAAEG,KAAZ;AAAmB,QAAA,KAAK,EAAED,IAAI,CAACJ,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACH,GAJA,CADL,CAVJ,CADJ,CAHR,CAFJ;AA6BH,CApFD;;AAsFA1B,MAAM,CAACgC,eAAP,GAAyB,gBAAe;AAACC,EAAAA,KAAD;AAAOC,EAAAA,GAAP;AAAWC,EAAAA,GAAX;AAAeC,EAAAA;AAAf,CAAf,EAAsC;AAC3D,QAAMX,IAAI,GAAGW,KAAK,CAACX,IAAnB;AAEA,SAAO;AACHb,IAAAA,QAAQ,EAAEa;AADP,GAAP;AAGH,CAND;;AAOA,eAAezB,MAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {connect,useDispatch,useSelector} from 'react-redux';\r\nimport {getSingleRoaster,getAllPlayerId} from '../redux/actions/counterActions';\r\nimport { useImmer } from \"use-immer\"\r\nimport Cards from '../components/Cards';\r\n\r\n//--//\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundImage: `url(${\"./floor.png\"})`,\r\n        backgroundAttachment: 'fixed',\r\n        height: '100vh'\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    tableStyle: {\r\n        width: '50%',\r\n        margin: 'auto',\r\n    }\r\n});\r\n\r\nconst Roster = (props) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {teamRoaster,personIds} = useSelector((state)=>state.counter);\r\n\r\n    const [state, setState] = useImmer({\r\n        isLoading: true,\r\n        players: [],\r\n        playerBio: []\r\n    })\r\n\r\n    useEffect(()=>{\r\n        dispatch(getSingleRoaster(props.teamName));\r\n        getAllPlayers();\r\n    },[])\r\n\r\n    /*get all playerid for a given roster by team name*/\r\n    useEffect(()=>{\r\n         if(!teamRoaster){\r\n             console.log('run something here');\r\n         } else {\r\n             console.log(teamRoaster[0].teamId);\r\n             dispatch(getAllPlayerId(teamRoaster[0].teamId));\r\n         }\r\n    },[teamRoaster])\r\n\r\n   /*array of player ids*/\r\n    useEffect(()=>{\r\n        if(!personIds){\r\n        } else{\r\n            setState(draft => {\r\n                draft.players = personIds.league.standard.players\r\n            })\r\n        }\r\n    },[personIds])\r\n\r\n\r\n    async function getAllPlayers() {\r\n        try{\r\n            const response = await fetch(`http://data.nba.net/10s/prod/v1/2019/players.json`);\r\n            const data = await response.json();\r\n\r\n\r\n            let filteredTeams = data.league.standard.filter((team)=>{\r\n                console.log(team.personId)\r\n            })\r\n\r\n\r\n        }catch (e) {\r\n            console.log(e)\r\n        }\r\n        /*setPlayer(data.league.standard.stats.careerSummary);*/\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {state.players.length > 0 && (\r\n\r\n                <TableContainer component={Paper} className={classes.tableStyle}>\r\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>NAME</TableCell>\r\n                                <TableCell align=\"left\">POINTS</TableCell>\r\n                                <TableCell align=\"right\">BLOCKS</TableCell>\r\n                                <TableCell align=\"right\">ASSISTS</TableCell>\r\n                                <TableCell align=\"right\">STEALS</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {state.players.map((post,index) => {\r\n                               if(index <= state.players.length){\r\n                                   return <Cards key={index} apost={post.personId}/>\r\n                               }\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nRoster.getInitialProps = async function({store,req,res,query}) {\r\n    const team = query.team;\r\n\r\n    return {\r\n        teamName: team\r\n    };\r\n}\r\nexport default Roster;\r\n\r\n"]},"metadata":{},"sourceType":"module"}