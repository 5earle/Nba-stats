{"ast":null,"code":"var _jsxFileName = \"W:\\\\1FrontEnd\\\\react stuff\\\\courtSide\\\\pages\\\\roster.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { getSingleRoaster, getAllPlayerId } from '../redux/actions/counterActions';\nimport { useImmer } from \"use-immer\";\nimport Cards from '../components/Cards'; //--//\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nconst useStyles = makeStyles({\n  root: {\n    backgroundImage: `url(${\"./floor.png\"})`,\n    backgroundAttachment: 'fixed',\n    height: '100vh'\n  },\n  table: {\n    minWidth: 650\n  },\n  tableStyle: {\n    width: '50%',\n    margin: 'auto'\n  }\n});\n\nconst Roster = props => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    teamRoaster,\n    personIds\n  } = useSelector(state => state.counter);\n  const [state, setState] = useImmer({\n    isLoading: true,\n    players: []\n  });\n  useEffect(() => {\n    dispatch(getSingleRoaster(props.teamID));\n  }, []);\n  useEffect(() => {\n    if (!teamRoaster) {\n      console.log('run something here');\n    } else {\n      dispatch(getAllPlayerId('1610612750'));\n    }\n  }, [teamRoaster]);\n  useEffect(() => {\n    if (personIds) {\n      console.log(personIds.league.standard.players);\n      setState(draft => {\n        draft.players = personIds.league.standard.players;\n      });\n    }\n  }, [personIds]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, state.players.length > 0 && __jsx(TableContainer, {\n    component: Paper,\n    className: classes.tableStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"a dense table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }, \"Name\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }, \"Calories\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }\n  }, \"Fat\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }\n  }, \"Carbs\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  }, \"Protein\\xA0(g)\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, state.players.map(post => {\n    return __jsx(Cards, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 40\n      }\n    });\n  })))));\n};\n\nRoster.getInitialProps = async function ({\n  store,\n  req,\n  res,\n  query\n}) {\n  const teamName = query.team;\n  return {\n    teamID: teamName\n  };\n};\n\nexport default Roster;","map":{"version":3,"sources":["W:/1FrontEnd/react stuff/courtSide/pages/roster.js"],"names":["React","useEffect","useState","fetch","connect","useDispatch","useSelector","getSingleRoaster","getAllPlayerId","useImmer","Cards","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useStyles","root","backgroundImage","backgroundAttachment","height","table","minWidth","tableStyle","width","margin","Roster","props","classes","dispatch","teamRoaster","personIds","state","counter","setState","isLoading","players","teamID","console","log","league","standard","draft","length","map","post","getInitialProps","store","req","res","query","teamName","team"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {connect,useDispatch,useSelector} from 'react-redux';\r\nimport {getSingleRoaster,getAllPlayerId} from '../redux/actions/counterActions';\r\nimport { useImmer } from \"use-immer\"\r\nimport Cards from '../components/Cards';\r\n\r\n//--//\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundImage: `url(${\"./floor.png\"})`,\r\n        backgroundAttachment: 'fixed',\r\n        height: '100vh'\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    tableStyle: {\r\n        width: '50%',\r\n        margin: 'auto',\r\n    }\r\n});\r\n\r\nconst Roster = (props) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {teamRoaster,personIds} = useSelector((state)=>state.counter);\r\n    const [state, setState] = useImmer({\r\n        isLoading: true,\r\n        players: []\r\n    })\r\n\r\n    useEffect(()=>{\r\n        dispatch(getSingleRoaster(props.teamID))\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n         if(!teamRoaster){\r\n             console.log('run something here');\r\n         } else {\r\n             dispatch(getAllPlayerId('1610612750'));\r\n         }\r\n    },[teamRoaster])\r\n\r\n    useEffect(()=>{\r\n        if(personIds){\r\n            console.log(personIds.league.standard.players)\r\n            setState(draft => {\r\n                draft.players = personIds.league.standard.players\r\n            })\r\n        }\r\n    },[personIds])\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {state.players.length > 0 && (\r\n\r\n                <TableContainer component={Paper} className={classes.tableStyle}>\r\n                    <Table className={classes.table}  aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Name</TableCell>\r\n                                <TableCell align=\"left\">Calories</TableCell>\r\n                                <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n                                <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n                                <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {state.players.map(post => {\r\n                                return <Cards  post={post}/>\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nRoster.getInitialProps = async function({store,req,res,query}) {\r\n    const teamName = query.team;\r\n\r\n    return {\r\n        teamID: teamName\r\n    };\r\n}\r\nexport default Roster;\r\n\r\n"]},"metadata":{},"sourceType":"module"}